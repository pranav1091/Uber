#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Linq;
using System.Data.Linq.Mapping;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;



[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="DBProjectDatabase")]
public partial class DataClassesDataContext : System.Data.Linq.DataContext
{
	
	private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
	
  #region Extensibility Method Definitions
  partial void OnCreated();
  partial void InsertDriver(Driver instance);
  partial void UpdateDriver(Driver instance);
  partial void DeleteDriver(Driver instance);
  partial void InsertRider(Rider instance);
  partial void UpdateRider(Rider instance);
  partial void DeleteRider(Rider instance);
  partial void InsertTrip(Trip instance);
  partial void UpdateTrip(Trip instance);
  partial void DeleteTrip(Trip instance);
  partial void InsertSign_Up_table(Sign_Up_table instance);
  partial void UpdateSign_Up_table(Sign_Up_table instance);
  partial void DeleteSign_Up_table(Sign_Up_table instance);
  #endregion
	
	public DataClassesDataContext() : 
			base(global::System.Configuration.ConfigurationManager.ConnectionStrings["DBProjectDatabaseConnectionString"].ConnectionString, mappingSource)
	{
		OnCreated();
	}
	
	public DataClassesDataContext(string connection) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public DataClassesDataContext(System.Data.IDbConnection connection) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public DataClassesDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public DataClassesDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public System.Data.Linq.Table<Driver> Drivers
	{
		get
		{
			return this.GetTable<Driver>();
		}
	}
	
	public System.Data.Linq.Table<Lgn_Table> Lgn_Tables
	{
		get
		{
			return this.GetTable<Lgn_Table>();
		}
	}
	
	public System.Data.Linq.Table<Rider> Riders
	{
		get
		{
			return this.GetTable<Rider>();
		}
	}
	
	public System.Data.Linq.Table<Trip> Trips
	{
		get
		{
			return this.GetTable<Trip>();
		}
	}
	
	public System.Data.Linq.Table<Sign_Up_table> Sign_Up_tables
	{
		get
		{
			return this.GetTable<Sign_Up_table>();
		}
	}
	
	[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.CheckIt")]
	public ISingleResult<CheckItResult> CheckIt([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarChar(50)")] string username)
	{
		IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), username);
		return ((ISingleResult<CheckItResult>)(result.ReturnValue));
	}
	
	[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.CheckLogin")]
	public ISingleResult<CheckLoginResult> CheckLogin([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarChar(50)")] string username, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarChar(50)")] string password)
	{
		IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), username, password);
		return ((ISingleResult<CheckLoginResult>)(result.ReturnValue));
	}
	
	[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.InsertUserLogin")]
	public int InsertUserLogin([global::System.Data.Linq.Mapping.ParameterAttribute(Name="First_Name", DbType="Text")] string first_Name, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Last_Name", DbType="Text")] string last_Name, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Username", DbType="VarChar(50)")] string username, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Phone_Number", DbType="VarChar(50)")] string phone_Number, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Role", DbType="VarChar(50)")] string role, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="E_Mail_ID", DbType="VarChar(50)")] string e_Mail_ID, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Password", DbType="VarChar(50)")] string password, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Card_Number", DbType="VarChar(50)")] string card_Number, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="CVV_Number", DbType="VarChar(50)")] string cVV_Number, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Exp_Date", DbType="VarChar(50)")] string exp_Date, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Postal_Code", DbType="VarChar(50)")] string postal_Code)
	{
		IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), first_Name, last_Name, username, phone_Number, role, e_Mail_ID, password, card_Number, cVV_Number, exp_Date, postal_Code);
		return ((int)(result.ReturnValue));
	}
	
	[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.CheckEmail")]
	public ISingleResult<CheckEmailResult> CheckEmail([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarChar(50)")] string email_id)
	{
		IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), email_id);
		return ((ISingleResult<CheckEmailResult>)(result.ReturnValue));
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Driver")]
public partial class Driver : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _Driver_ID;
	
	private int _User_ID;
	
	private string _Driver_Name;
	
	private EntitySet<Trip> _Trips;
	
	private EntityRef<Sign_Up_table> _Sign_Up_table;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDriver_IDChanging(int value);
    partial void OnDriver_IDChanged();
    partial void OnUser_IDChanging(int value);
    partial void OnUser_IDChanged();
    partial void OnDriver_NameChanging(string value);
    partial void OnDriver_NameChanged();
    #endregion
	
	public Driver()
	{
		this._Trips = new EntitySet<Trip>(new Action<Trip>(this.attach_Trips), new Action<Trip>(this.detach_Trips));
		this._Sign_Up_table = default(EntityRef<Sign_Up_table>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Driver_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
	public int Driver_ID
	{
		get
		{
			return this._Driver_ID;
		}
		set
		{
			if ((this._Driver_ID != value))
			{
				this.OnDriver_IDChanging(value);
				this.SendPropertyChanging();
				this._Driver_ID = value;
				this.SendPropertyChanged("Driver_ID");
				this.OnDriver_IDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_User_ID", DbType="Int NOT NULL")]
	public int User_ID
	{
		get
		{
			return this._User_ID;
		}
		set
		{
			if ((this._User_ID != value))
			{
				if (this._Sign_Up_table.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnUser_IDChanging(value);
				this.SendPropertyChanging();
				this._User_ID = value;
				this.SendPropertyChanged("User_ID");
				this.OnUser_IDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Driver_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
	public string Driver_Name
	{
		get
		{
			return this._Driver_Name;
		}
		set
		{
			if ((this._Driver_Name != value))
			{
				this.OnDriver_NameChanging(value);
				this.SendPropertyChanging();
				this._Driver_Name = value;
				this.SendPropertyChanged("Driver_Name");
				this.OnDriver_NameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Driver_Trip", Storage="_Trips", ThisKey="Driver_ID", OtherKey="Driver_ID")]
	public EntitySet<Trip> Trips
	{
		get
		{
			return this._Trips;
		}
		set
		{
			this._Trips.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Sign_Up_table_Driver", Storage="_Sign_Up_table", ThisKey="User_ID", OtherKey="User_id", IsForeignKey=true)]
	public Sign_Up_table Sign_Up_table
	{
		get
		{
			return this._Sign_Up_table.Entity;
		}
		set
		{
			Sign_Up_table previousValue = this._Sign_Up_table.Entity;
			if (((previousValue != value) 
						|| (this._Sign_Up_table.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Sign_Up_table.Entity = null;
					previousValue.Drivers.Remove(this);
				}
				this._Sign_Up_table.Entity = value;
				if ((value != null))
				{
					value.Drivers.Add(this);
					this._User_ID = value.User_id;
				}
				else
				{
					this._User_ID = default(int);
				}
				this.SendPropertyChanged("Sign_Up_table");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Trips(Trip entity)
	{
		this.SendPropertyChanging();
		entity.Driver1 = this;
	}
	
	private void detach_Trips(Trip entity)
	{
		this.SendPropertyChanging();
		entity.Driver1 = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Lgn_Table")]
public partial class Lgn_Table
{
	
	private int _User_id;
	
	private string _Username;
	
	private string _Password;
	
	private string _Role;
	
	public Lgn_Table()
	{
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_User_id", DbType="Int NOT NULL")]
	public int User_id
	{
		get
		{
			return this._User_id;
		}
		set
		{
			if ((this._User_id != value))
			{
				this._User_id = value;
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Username", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
	public string Username
	{
		get
		{
			return this._Username;
		}
		set
		{
			if ((this._Username != value))
			{
				this._Username = value;
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
	public string Password
	{
		get
		{
			return this._Password;
		}
		set
		{
			if ((this._Password != value))
			{
				this._Password = value;
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Role", DbType="VarChar(50)")]
	public string Role
	{
		get
		{
			return this._Role;
		}
		set
		{
			if ((this._Role != value))
			{
				this._Role = value;
			}
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Rider")]
public partial class Rider : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _Rider_ID;
	
	private string _Rider_Name;
	
	private int _User_ID;
	
	private EntitySet<Trip> _Trips;
	
	private EntityRef<Sign_Up_table> _Sign_Up_table;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRider_IDChanging(int value);
    partial void OnRider_IDChanged();
    partial void OnRider_NameChanging(string value);
    partial void OnRider_NameChanged();
    partial void OnUser_IDChanging(int value);
    partial void OnUser_IDChanged();
    #endregion
	
	public Rider()
	{
		this._Trips = new EntitySet<Trip>(new Action<Trip>(this.attach_Trips), new Action<Trip>(this.detach_Trips));
		this._Sign_Up_table = default(EntityRef<Sign_Up_table>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Rider_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int Rider_ID
	{
		get
		{
			return this._Rider_ID;
		}
		set
		{
			if ((this._Rider_ID != value))
			{
				this.OnRider_IDChanging(value);
				this.SendPropertyChanging();
				this._Rider_ID = value;
				this.SendPropertyChanged("Rider_ID");
				this.OnRider_IDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Rider_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
	public string Rider_Name
	{
		get
		{
			return this._Rider_Name;
		}
		set
		{
			if ((this._Rider_Name != value))
			{
				this.OnRider_NameChanging(value);
				this.SendPropertyChanging();
				this._Rider_Name = value;
				this.SendPropertyChanged("Rider_Name");
				this.OnRider_NameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_User_ID", DbType="Int NOT NULL")]
	public int User_ID
	{
		get
		{
			return this._User_ID;
		}
		set
		{
			if ((this._User_ID != value))
			{
				if (this._Sign_Up_table.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnUser_IDChanging(value);
				this.SendPropertyChanging();
				this._User_ID = value;
				this.SendPropertyChanged("User_ID");
				this.OnUser_IDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Rider_Trip", Storage="_Trips", ThisKey="Rider_ID", OtherKey="Rider_ID")]
	public EntitySet<Trip> Trips
	{
		get
		{
			return this._Trips;
		}
		set
		{
			this._Trips.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Sign_Up_table_Rider", Storage="_Sign_Up_table", ThisKey="User_ID", OtherKey="User_id", IsForeignKey=true)]
	public Sign_Up_table Sign_Up_table
	{
		get
		{
			return this._Sign_Up_table.Entity;
		}
		set
		{
			Sign_Up_table previousValue = this._Sign_Up_table.Entity;
			if (((previousValue != value) 
						|| (this._Sign_Up_table.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Sign_Up_table.Entity = null;
					previousValue.Riders.Remove(this);
				}
				this._Sign_Up_table.Entity = value;
				if ((value != null))
				{
					value.Riders.Add(this);
					this._User_ID = value.User_id;
				}
				else
				{
					this._User_ID = default(int);
				}
				this.SendPropertyChanged("Sign_Up_table");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Trips(Trip entity)
	{
		this.SendPropertyChanging();
		entity.Rider = this;
	}
	
	private void detach_Trips(Trip entity)
	{
		this.SendPropertyChanging();
		entity.Rider = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Trips")]
public partial class Trip : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _Trip_ID;
	
	private int _Rider_ID;
	
	private int _Driver_ID;
	
	private string _Pickup;
	
	private string _Driver;
	
	private string _Fare;
	
	private string _Car;
	
	private string _City;
	
	private string _Payment_Method;
	
	private EntityRef<Driver> _Driver1;
	
	private EntityRef<Rider> _Rider;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTrip_IDChanging(int value);
    partial void OnTrip_IDChanged();
    partial void OnRider_IDChanging(int value);
    partial void OnRider_IDChanged();
    partial void OnDriver_IDChanging(int value);
    partial void OnDriver_IDChanged();
    partial void OnPickupChanging(string value);
    partial void OnPickupChanged();
    partial void OnDriverChanging(string value);
    partial void OnDriverChanged();
    partial void OnFareChanging(string value);
    partial void OnFareChanged();
    partial void OnCarChanging(string value);
    partial void OnCarChanged();
    partial void OnCityChanging(string value);
    partial void OnCityChanged();
    partial void OnPayment_MethodChanging(string value);
    partial void OnPayment_MethodChanged();
    #endregion
	
	public Trip()
	{
		this._Driver1 = default(EntityRef<Driver>);
		this._Rider = default(EntityRef<Rider>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Trip_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int Trip_ID
	{
		get
		{
			return this._Trip_ID;
		}
		set
		{
			if ((this._Trip_ID != value))
			{
				this.OnTrip_IDChanging(value);
				this.SendPropertyChanging();
				this._Trip_ID = value;
				this.SendPropertyChanged("Trip_ID");
				this.OnTrip_IDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Rider_ID", DbType="Int NOT NULL")]
	public int Rider_ID
	{
		get
		{
			return this._Rider_ID;
		}
		set
		{
			if ((this._Rider_ID != value))
			{
				if (this._Rider.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnRider_IDChanging(value);
				this.SendPropertyChanging();
				this._Rider_ID = value;
				this.SendPropertyChanged("Rider_ID");
				this.OnRider_IDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Driver_ID", DbType="Int NOT NULL")]
	public int Driver_ID
	{
		get
		{
			return this._Driver_ID;
		}
		set
		{
			if ((this._Driver_ID != value))
			{
				if (this._Driver1.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnDriver_IDChanging(value);
				this.SendPropertyChanging();
				this._Driver_ID = value;
				this.SendPropertyChanged("Driver_ID");
				this.OnDriver_IDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Pickup", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
	public string Pickup
	{
		get
		{
			return this._Pickup;
		}
		set
		{
			if ((this._Pickup != value))
			{
				this.OnPickupChanging(value);
				this.SendPropertyChanging();
				this._Pickup = value;
				this.SendPropertyChanged("Pickup");
				this.OnPickupChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Driver", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
	public string Driver
	{
		get
		{
			return this._Driver;
		}
		set
		{
			if ((this._Driver != value))
			{
				this.OnDriverChanging(value);
				this.SendPropertyChanging();
				this._Driver = value;
				this.SendPropertyChanged("Driver");
				this.OnDriverChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Fare", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
	public string Fare
	{
		get
		{
			return this._Fare;
		}
		set
		{
			if ((this._Fare != value))
			{
				this.OnFareChanging(value);
				this.SendPropertyChanging();
				this._Fare = value;
				this.SendPropertyChanged("Fare");
				this.OnFareChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Car", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
	public string Car
	{
		get
		{
			return this._Car;
		}
		set
		{
			if ((this._Car != value))
			{
				this.OnCarChanging(value);
				this.SendPropertyChanging();
				this._Car = value;
				this.SendPropertyChanged("Car");
				this.OnCarChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_City", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
	public string City
	{
		get
		{
			return this._City;
		}
		set
		{
			if ((this._City != value))
			{
				this.OnCityChanging(value);
				this.SendPropertyChanging();
				this._City = value;
				this.SendPropertyChanged("City");
				this.OnCityChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Payment_Method", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
	public string Payment_Method
	{
		get
		{
			return this._Payment_Method;
		}
		set
		{
			if ((this._Payment_Method != value))
			{
				this.OnPayment_MethodChanging(value);
				this.SendPropertyChanging();
				this._Payment_Method = value;
				this.SendPropertyChanged("Payment_Method");
				this.OnPayment_MethodChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Driver_Trip", Storage="_Driver1", ThisKey="Driver_ID", OtherKey="Driver_ID", IsForeignKey=true)]
	public Driver Driver1
	{
		get
		{
			return this._Driver1.Entity;
		}
		set
		{
			Driver previousValue = this._Driver1.Entity;
			if (((previousValue != value) 
						|| (this._Driver1.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Driver1.Entity = null;
					previousValue.Trips.Remove(this);
				}
				this._Driver1.Entity = value;
				if ((value != null))
				{
					value.Trips.Add(this);
					this._Driver_ID = value.Driver_ID;
				}
				else
				{
					this._Driver_ID = default(int);
				}
				this.SendPropertyChanged("Driver1");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Rider_Trip", Storage="_Rider", ThisKey="Rider_ID", OtherKey="Rider_ID", IsForeignKey=true)]
	public Rider Rider
	{
		get
		{
			return this._Rider.Entity;
		}
		set
		{
			Rider previousValue = this._Rider.Entity;
			if (((previousValue != value) 
						|| (this._Rider.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Rider.Entity = null;
					previousValue.Trips.Remove(this);
				}
				this._Rider.Entity = value;
				if ((value != null))
				{
					value.Trips.Add(this);
					this._Rider_ID = value.Rider_ID;
				}
				else
				{
					this._Rider_ID = default(int);
				}
				this.SendPropertyChanged("Rider");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Sign_Up_table")]
public partial class Sign_Up_table : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _User_id;
	
	private string _First_Name;
	
	private string _Last_Name;
	
	private string _Username;
	
	private string _Phone_Number;
	
	private string _Role;
	
	private string _E_Mail_ID;
	
	private string _Password;
	
	private string _Card_Number;
	
	private string _CVV_Number;
	
	private string _Exp_Date;
	
	private string _Postal_Code;
	
	private EntitySet<Driver> _Drivers;
	
	private EntitySet<Rider> _Riders;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUser_idChanging(int value);
    partial void OnUser_idChanged();
    partial void OnFirst_NameChanging(string value);
    partial void OnFirst_NameChanged();
    partial void OnLast_NameChanging(string value);
    partial void OnLast_NameChanged();
    partial void OnUsernameChanging(string value);
    partial void OnUsernameChanged();
    partial void OnPhone_NumberChanging(string value);
    partial void OnPhone_NumberChanged();
    partial void OnRoleChanging(string value);
    partial void OnRoleChanged();
    partial void OnE_Mail_IDChanging(string value);
    partial void OnE_Mail_IDChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnCard_NumberChanging(string value);
    partial void OnCard_NumberChanged();
    partial void OnCVV_NumberChanging(string value);
    partial void OnCVV_NumberChanged();
    partial void OnExp_DateChanging(string value);
    partial void OnExp_DateChanged();
    partial void OnPostal_CodeChanging(string value);
    partial void OnPostal_CodeChanged();
    #endregion
	
	public Sign_Up_table()
	{
		this._Drivers = new EntitySet<Driver>(new Action<Driver>(this.attach_Drivers), new Action<Driver>(this.detach_Drivers));
		this._Riders = new EntitySet<Rider>(new Action<Rider>(this.attach_Riders), new Action<Rider>(this.detach_Riders));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_User_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int User_id
	{
		get
		{
			return this._User_id;
		}
		set
		{
			if ((this._User_id != value))
			{
				this.OnUser_idChanging(value);
				this.SendPropertyChanging();
				this._User_id = value;
				this.SendPropertyChanged("User_id");
				this.OnUser_idChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_First_Name", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
	public string First_Name
	{
		get
		{
			return this._First_Name;
		}
		set
		{
			if ((this._First_Name != value))
			{
				this.OnFirst_NameChanging(value);
				this.SendPropertyChanging();
				this._First_Name = value;
				this.SendPropertyChanged("First_Name");
				this.OnFirst_NameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Last_Name", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
	public string Last_Name
	{
		get
		{
			return this._Last_Name;
		}
		set
		{
			if ((this._Last_Name != value))
			{
				this.OnLast_NameChanging(value);
				this.SendPropertyChanging();
				this._Last_Name = value;
				this.SendPropertyChanged("Last_Name");
				this.OnLast_NameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Username", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
	public string Username
	{
		get
		{
			return this._Username;
		}
		set
		{
			if ((this._Username != value))
			{
				this.OnUsernameChanging(value);
				this.SendPropertyChanging();
				this._Username = value;
				this.SendPropertyChanged("Username");
				this.OnUsernameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Phone_Number", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
	public string Phone_Number
	{
		get
		{
			return this._Phone_Number;
		}
		set
		{
			if ((this._Phone_Number != value))
			{
				this.OnPhone_NumberChanging(value);
				this.SendPropertyChanging();
				this._Phone_Number = value;
				this.SendPropertyChanged("Phone_Number");
				this.OnPhone_NumberChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Role", DbType="VarChar(50)")]
	public string Role
	{
		get
		{
			return this._Role;
		}
		set
		{
			if ((this._Role != value))
			{
				this.OnRoleChanging(value);
				this.SendPropertyChanging();
				this._Role = value;
				this.SendPropertyChanged("Role");
				this.OnRoleChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_E_Mail_ID", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
	public string E_Mail_ID
	{
		get
		{
			return this._E_Mail_ID;
		}
		set
		{
			if ((this._E_Mail_ID != value))
			{
				this.OnE_Mail_IDChanging(value);
				this.SendPropertyChanging();
				this._E_Mail_ID = value;
				this.SendPropertyChanged("E_Mail_ID");
				this.OnE_Mail_IDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
	public string Password
	{
		get
		{
			return this._Password;
		}
		set
		{
			if ((this._Password != value))
			{
				this.OnPasswordChanging(value);
				this.SendPropertyChanging();
				this._Password = value;
				this.SendPropertyChanged("Password");
				this.OnPasswordChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Card_Number", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
	public string Card_Number
	{
		get
		{
			return this._Card_Number;
		}
		set
		{
			if ((this._Card_Number != value))
			{
				this.OnCard_NumberChanging(value);
				this.SendPropertyChanging();
				this._Card_Number = value;
				this.SendPropertyChanged("Card_Number");
				this.OnCard_NumberChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CVV_Number", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
	public string CVV_Number
	{
		get
		{
			return this._CVV_Number;
		}
		set
		{
			if ((this._CVV_Number != value))
			{
				this.OnCVV_NumberChanging(value);
				this.SendPropertyChanging();
				this._CVV_Number = value;
				this.SendPropertyChanged("CVV_Number");
				this.OnCVV_NumberChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Exp_Date", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
	public string Exp_Date
	{
		get
		{
			return this._Exp_Date;
		}
		set
		{
			if ((this._Exp_Date != value))
			{
				this.OnExp_DateChanging(value);
				this.SendPropertyChanging();
				this._Exp_Date = value;
				this.SendPropertyChanged("Exp_Date");
				this.OnExp_DateChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Postal_Code", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
	public string Postal_Code
	{
		get
		{
			return this._Postal_Code;
		}
		set
		{
			if ((this._Postal_Code != value))
			{
				this.OnPostal_CodeChanging(value);
				this.SendPropertyChanging();
				this._Postal_Code = value;
				this.SendPropertyChanged("Postal_Code");
				this.OnPostal_CodeChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Sign_Up_table_Driver", Storage="_Drivers", ThisKey="User_id", OtherKey="User_ID")]
	public EntitySet<Driver> Drivers
	{
		get
		{
			return this._Drivers;
		}
		set
		{
			this._Drivers.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Sign_Up_table_Rider", Storage="_Riders", ThisKey="User_id", OtherKey="User_ID")]
	public EntitySet<Rider> Riders
	{
		get
		{
			return this._Riders;
		}
		set
		{
			this._Riders.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Drivers(Driver entity)
	{
		this.SendPropertyChanging();
		entity.Sign_Up_table = this;
	}
	
	private void detach_Drivers(Driver entity)
	{
		this.SendPropertyChanging();
		entity.Sign_Up_table = null;
	}
	
	private void attach_Riders(Rider entity)
	{
		this.SendPropertyChanging();
		entity.Sign_Up_table = this;
	}
	
	private void detach_Riders(Rider entity)
	{
		this.SendPropertyChanging();
		entity.Sign_Up_table = null;
	}
}

public partial class CheckItResult
{
	
	private string _Username;
	
	public CheckItResult()
	{
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Username", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
	public string Username
	{
		get
		{
			return this._Username;
		}
		set
		{
			if ((this._Username != value))
			{
				this._Username = value;
			}
		}
	}
}

public partial class CheckLoginResult
{
	
	private int _User_id;
	
	private string _Username;
	
	private string _Password;
	
	public CheckLoginResult()
	{
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_User_id", DbType="Int NOT NULL")]
	public int User_id
	{
		get
		{
			return this._User_id;
		}
		set
		{
			if ((this._User_id != value))
			{
				this._User_id = value;
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Username", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
	public string Username
	{
		get
		{
			return this._Username;
		}
		set
		{
			if ((this._Username != value))
			{
				this._Username = value;
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
	public string Password
	{
		get
		{
			return this._Password;
		}
		set
		{
			if ((this._Password != value))
			{
				this._Password = value;
			}
		}
	}
}

public partial class CheckEmailResult
{
	
	private string _E_Mail_ID;
	
	public CheckEmailResult()
	{
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_E_Mail_ID", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
	public string E_Mail_ID
	{
		get
		{
			return this._E_Mail_ID;
		}
		set
		{
			if ((this._E_Mail_ID != value))
			{
				this._E_Mail_ID = value;
			}
		}
	}
}
#pragma warning restore 1591
